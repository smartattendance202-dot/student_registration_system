# -*- coding: utf-8 -*-
"""
ุชุทุจูู ูุธุงู ุชุณุฌูู ุงูุทูุงุจ
"""

import os
from flask import Flask
from app.extensions import db, migrate, login_manager, csrf, limiter
from app.config import Config


def create_app(config_class=Config):
    """ุฅูุดุงุก ูุชูููู ุชุทุจูู Flask"""
    print('[create_app] start')
    app = Flask(__name__)
    print('[create_app] Flask created')
    app.config.from_object(config_class)
    print('[create_app] config loaded')

    # ุชููุฆุฉ ุงูุฅุถุงูุงุช
    db.init_app(app)
    print('[create_app] db.init_app')
    migrate.init_app(app, db)
    print('[create_app] migrate.init_app')
    login_manager.init_app(app)
    print('[create_app] login_manager.init_app')
    csrf.init_app(app)
    print('[create_app] csrf.init_app')
    limiter.init_app(app)
    print('[create_app] limiter.init_app')

    # ุชูููู Flask-Login
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ูููุตูู ุฅูู ูุฐู ุงูุตูุญุฉ.'
    login_manager.login_message_category = 'info'
    print('[create_app] login configured')

    # ุชุณุฌูู Blueprints
    from app.auth.routes import bp as auth_bp
    app.register_blueprint(auth_bp, url_prefix='/auth')
    print('[create_app] auth blueprint')

    from app.student.routes import bp as student_bp
    app.register_blueprint(student_bp, url_prefix='/student')
    print('[create_app] student blueprint')



    # ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
    from app.main import bp as main_bp
    app.register_blueprint(main_bp)
    print('[create_app] main blueprint')

    # ูุง ุชูุฌุฏ ูุฌุฏููุฉ ูู ูุธุงู ุชุณุฌูู ุงูุจูุงูุงุช - ุงูุจูุงูุงุช ูุญููุธุฉ ุฏุงุฆูุงู
    print('[create_app] ูุธุงู ุชุณุฌูู ุจูุงูุงุช ุจุฏูู ูุฌุฏููุฉ')

    # ุฅูุดุงุก ูุฌูุฏุงุช ุงูุฑูุน
    upload_folder = app.config.get('UPLOAD_FOLDER', 'uploads')
    os.makedirs(os.path.join(upload_folder, 'applications'), exist_ok=True)
    print('[create_app] upload folders ready')

    # ุชูุธูู ุฏูุฑู ููุญุณุงุจุงุช ุบูุฑ ุงููุคูุฏุฉ (ุนูุฏ ุจุฏุก ุงูุชุทุจูู)
    with app.app_context():
        try:
            from app.models import User
            deleted_count = User.delete_unverified_users()
            if deleted_count > 0:
                print(f'๐งน ุชู ุญุฐู {deleted_count} ุญุณุงุจ ุบูุฑ ูุคูุฏ ููุชูู ุงูุตูุงุญูุฉ ุนูุฏ ุจุฏุก ุงูุชุทุจูู')
        except Exception as e:
            print(f'โ ุฎุทุฃ ูู ุชูุธูู ุงูุญุณุงุจุงุช ุนูุฏ ุจุฏุก ุงูุชุทุจูู: {str(e)}')

    print('[create_app] done')
    return app


# ุงุณุชูุฑุงุฏ ุงูููุงุฐุฌ ูุถูุงู ุฅูุดุงุก ุงูุฌุฏุงูู
from app import models
